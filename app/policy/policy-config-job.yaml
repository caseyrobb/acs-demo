kind: Job
apiVersion: batch/v1
metadata:
  name: policy-config-job
  namespace: stackrox
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    metadata:
      name: policy-config-job
      namespace: stackrox
    spec:
      containers:
        - name: policy-config-proc
          image: registry.redhat.io/ubi9/python-39
          command:
            - /bin/bash
            - '-c'
            - |
              pip install -q -U requests 2>/dev/null
              cat << EOF > policy-config.py

              import requests
              import json
              import os
              
              CENTRAL = f"https://{os.environ.get('CENTRAL')}"
              ACS_ADMIN_PASSWORD = os.environ.get("ACS_ADMIN_PASSWORD")

              req = requests.get(
                  f"{CENTRAL}/v1/policies", verify=False, auth=("admin", f"{ACS_ADMIN_PASSWORD}")
              )
              if req.status_code >= 400:
                  print(f"Error {req.status_code}: {req.reason}")
                  sys.exit(-1)

              # ignore all default policies
              all_policies = json.loads(req.text)
              user_defined_policies = [x for x in all_policies["policies"] if not x["isDefault"]]


              def check_if_policy_exists(policy):
                  # check policy for unique name
                  return True in [policy['name'] in p['name'] for p in user_defined_policies]


              def get_policy_id(policy):
                # find id by policy name
                return [p["id"] for p in user_defined_policies if p['name'] == policy['name']][0]

              with open("/tmp/policies-payload.json", "r") as f:
                  for policy in json.load(f)["policies"]:
                      # remove lastUpdated if it's defined
                      policy.pop('lastUpdated', None)
                      
                      if check_if_policy_exists(policy):
                          if not "id" in policy:
                              policy.update({"id": get_policy_id(policy)})
                          print(f"Updating policy '{policy['name']}'...")

                          r = requests.put(
                              f"{CENTRAL}/v1/policies/{policy['id']}",
                              verify=False,
                              auth=("admin", f"{ACS_ADMIN_PASSWORD}"),
                              data=json.dumps(policy)
                          )
                      else:
                          policy.pop('id', None)
                          print(f"Adding new policy '{policy['name']}'...")
                          r = requests.post(
                              f"{CENTRAL}/v1/policies",
                              verify=False,
                              auth=("admin", f"{ACS_ADMIN_PASSWORD}"),
                              data=json.dumps(policy),
                          )

                      print(f"{r.status_code} {r.reason}")

                      if r.status_code >= 400:
                          sys.exit(-1) 

              EOF

              python -Wignore policy-config.py

          volumeMounts:
          - name: policies-payload
            mountPath: /tmp/
          env:
            - name: ACS_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: central-htpasswd
                  key: password
            - name: CENTRAL
              valueFrom:
                configMapKeyRef:
                  name: admission-control
                  key: central-endpoint
      volumes:
      - name: policies-payload
        configMap:
          name: policies-payload
      restartPolicy: Never
